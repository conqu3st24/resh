import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from bybit_parser import BybitP2PParser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('bybit_p2p_bot')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞ Bybit
bybit_parser = BybitP2PParser()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö P2P –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ Bybit.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/best <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n"
        "/buy <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
        "/sell <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /best USDT RUB\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: USDT, BTC, ETH, USDC –∏ –¥—Ä—É–≥–∏–µ\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã: RUB, USD, EUR, UAH –∏ –¥—Ä—É–≥–∏–µ"
    )
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/best <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n"
        "/buy <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
        "/sell <–∫—Ä–∏–ø—Ç–æ> <—Ñ–∏–∞—Ç> - –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "/best USDT RUB - –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è USDT/RUB\n"
        "/buy BTC USD - –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC –∑–∞ USD\n"
        "/sell ETH EUR - –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ ETH –∑–∞ EUR\n\n"
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –≤–∞–ª—é—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—Ö –∫–æ–¥—ã"
    )
    
    await update.message.reply_text(help_message, parse_mode=ParseMode.MARKDOWN)

def format_offer_message(offer, trade_type_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
    if not offer:
        return f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {trade_type_text.lower()} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –≤–∞–ª—é—Ç."
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    payment_methods = ", ".join(offer['payment_methods']) if offer['payment_methods'] else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    message = (
        f"*{trade_type_text} {offer['crypto_currency']} –∑–∞ {offer['fiat_currency']}*\n\n"
        f"üí∞ *–ö—É—Ä—Å:* {offer['price']} {offer['fiat_currency']}\n"
        f"üë®‚Äçüíº *–¢—Ä–µ–π–¥–µ—Ä:* {offer['trader_name']}\n"
        f"üìä *–õ–∏–º–∏—Ç—ã:* {offer['min_amount']} - {offer['max_amount']} {offer['fiat_currency']}\n"
        f"üîÑ *–î–æ—Å—Ç—É–ø–Ω–æ:* {offer['available_amount']} {offer['crypto_currency']}\n"
        f"üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:* {payment_methods}\n\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å P2P Bybit](https://www.bybit.com/fiat/trade/otc/)"
    )
    
    return message

async def handle_buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy"""
    args = context.args
    
    if len(args) != 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /buy USDT RUB"
        )
        return
    
    crypto_currency = args[0].upper()
    fiat_currency = args[1].upper()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_message = await update.message.reply_text(
        f"üîç –ò—â—É –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {crypto_currency} –∑–∞ {fiat_currency}..."
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    offer = bybit_parser.get_best_offer(crypto_currency, fiat_currency, "buy")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    result_message = format_offer_message(offer, "–ü–æ–∫—É–ø–∫–∞")
    await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
    await processing_message.delete()

async def handle_sell_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    args = context.args
    
    if len(args) != 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /sell USDT RUB"
        )
        return
    
    crypto_currency = args[0].upper()
    fiat_currency = args[1].upper()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_message = await update.message.reply_text(
        f"üîç –ò—â—É –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {crypto_currency} –∑–∞ {fiat_currency}..."
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    offer = bybit_parser.get_best_offer(crypto_currency, fiat_currency, "sell")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    result_message = format_offer_message(offer, "–ü—Ä–æ–¥–∞–∂–∞")
    await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
    await processing_message.delete()

async def handle_best_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /best"""
    args = context.args
    
    if len(args) != 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /best USDT RUB"
        )
        return
    
    crypto_currency = args[0].upper()
    fiat_currency = args[1].upper()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_message = await update.message.reply_text(
        f"üîç –ò—â—É –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {crypto_currency}/{fiat_currency}..."
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
    buy_offer = bybit_parser.get_best_offer(crypto_currency, fiat_currency, "buy")
    sell_offer = bybit_parser.get_best_offer(crypto_currency, fiat_currency, "sell")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    buy_message = format_offer_message(buy_offer, "–ü–æ–∫—É–ø–∫–∞")
    sell_message = format_offer_message(sell_offer, "–ü—Ä–æ–¥–∞–∂–∞")
    
    # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    spread_message = ""
    if buy_offer and sell_offer:
        buy_price = float(buy_offer['price'])
        sell_price = float(sell_offer['price'])
        spread_percent = ((sell_price - buy_price) / buy_price) * 100
        spread_message = (
            f"\n\nüìä *–°–ø—Ä–µ–¥:* {spread_percent:.2f}%\n"
            f"üíπ *–†–∞–∑–Ω–∏—Ü–∞:* {sell_price - buy_price:.2f} {fiat_currency}"
        )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    result_message = (
        f"*–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {crypto_currency}/{fiat_currency}*\n\n"
        f"‚û°Ô∏è *–ü–û–ö–£–ü–ö–ê (buy):*\n{buy_message}\n\n"
        f"‚¨ÖÔ∏è *–ü–†–û–î–ê–ñ–ê (sell):*\n{sell_message}"
        f"{spread_message}"
        f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å P2P Bybit](https://www.bybit.com/fiat/trade/otc/)"
    )
    
    await update.message.reply_text(result_message, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
    await processing_message.delete()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("buy", handle_buy_command))
    application.add_handler(CommandHandler("sell", handle_sell_command))
    application.add_handler(CommandHandler("best", handle_best_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 